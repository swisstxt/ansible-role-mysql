---
- name: add the OS specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: add the RHEL 7 specific variables
  include_vars: "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version|int == 7

- name: add variables for MySQL Community Server on RedHad derivates
  include_vars: RedHat_community_server.yml
  when: ansible_os_family == 'RedHat' and mysql_community_server == true

- name: fetch community rpm package for CentOS
  get_url:
    url: "{{ mysql_community_server_repo }}"
    checksum: "{{ mysql_community_server_repo_checksum }}"
    dest: "/tmp/mysql-community-release.rpm"
  when: ansible_os_family == 'RedHat' and mysql_community_server == true

- name: install community yum repo
  yum:
    name: "/tmp/mysql-community-release.rpm"
    state: installed
  when: ansible_os_family == 'RedHat' and mysql_community_server == true

- name: install client
  when: mysql_only_client
  block:

  - name: install the mysql client packages in Redhat derivatives
    yum:
      name: "{{mysql_client_pkgs}}"
      enablerepo: "{{ 'mysql' + mysql_community_server_version|replace('.', '') + '-community' if mysql_community_server else omit }}"
      disablerepo: "{{ 'mysql80-community' if mysql_community_server and mysql_community_server_version != '8.0' else omit}}"
      state: installed
    when: ansible_os_family == 'RedHat'
    # On some servers, the mysql_community repo is installed but in an older version.
    # So the command will fail when trying to disable the repo mysql80-community.
    # Therefore, we ignore errors - it will fail later on anyway if here goes something wrong.
    ignore_errors: yes

  - name: Install the mysql packages in Debian derivatives
    apt:
      name: "{{mysql_client_pkgs}}"
      state: installed
    environment:
      # see e.g. http://askubuntu.com/a/75560
      RUNLEVEL: 1
    when: ansible_os_family == 'Debian'

- name: install server
  when: not mysql_only_client
  block:

  - name: install the mysql packages in Redhat derivatives
    yum:
      name: "{{mysql_pkgs}}"
      enablerepo: "{{ 'mysql' + mysql_community_server_version|replace('.', '') + '-community' if mysql_community_server else omit }}"
      disablerepo: "{{ 'mysql80-community' if mysql_community_server and mysql_community_server_version != '8.0' else omit}}"
      state: installed
    when: ansible_os_family == 'RedHat'
    # On some servers, the mysql_community repo is installed but in an older version.
    # So the command will fail when trying to disable the repo mysql80-community.
    # Therefore, we ignore errors - it will fail later on anyway if here goes something wrong.
    ignore_errors: yes

  - name: Install the mysql packages in Debian derivatives
    apt:
      name: "{{mysql_pkgs}}"
      state: installed
    environment:
      # see e.g. http://askubuntu.com/a/75560
      RUNLEVEL: 1
    when: ansible_os_family == 'Debian'

  - name: create datadir if different to default
    file: path={{ mysql_data_dir }} state=directory owner=mysql group=mysql
    when: mysql_data_dir != '/var/lib/mysql'

  - name: copy the my.cnf file
    template: src=my.cnf.{{ ansible_os_family }}.j2 dest={{ mysql_conf_dir }}/my.cnf
    notify:
    - restart mysql

  - name: Create the directory /etc/mysql/conf.d
    file: path=/etc/mysql/conf.d state=directory
    notify:
    - restart mysql

  - meta: flush_handlers

  - name: ensure mysql service has started/stopped
    service: name={{ mysql_service }} state={{ mysql_state }} enabled={{ mysql_enabled }}

  - name: get mysql version
    command: mysql --version
    register: mysql_cli_version
    changed_when: false
    check_mode: false

  - name: grep temporary password for root user
    shell: "echo $(grep 'temporary.*root@localhost' /var/log/messages | sed 's/.*root@localhost: //')"
    args:
      creates: /root/.my.cnf
    register: mysql_tmp_root_passwort
    check_mode: false
    when: "'5.7.' in mysql_cli_version.stdout"

  - name: use temporary password for root user
    set_fact:
      mysql_root_tmp_db_pass: "{{ mysql_tmp_root_passwort.stdout }}"
    when: mysql_tmp_root_passwort is not skipped

  - name: update mysql root password for localhost root account (5.7.x).
    shell: 'mysql -e "SET PASSWORD = PASSWORD(''{{ mysql_root_db_pass }}'');" --connect-expired-password -uroot -p"{{ mysql_root_tmp_db_pass }}"'
    args:
      creates: /root/.my.cnf
    when: "mysql_root_db_pass != '' and '5.7.' in mysql_cli_version.stdout"
    no_log: True

  - name: update mysql root password for all root accounts
    mysql_user: name=root host={{ item }} password={{ mysql_root_db_pass }}
    with_items:
    - "{{ ansible_hostname|lower() }}"
    - 127.0.0.1
    - ::1
    - localhost
    when: "mysql_root_db_pass != '' and '5.7.' not in mysql_cli_version.stdout"
    no_log: True

  - name: copy .my.cnf file with root password credentials
    template: src=.my.cnf.j2 dest=/root/.my.cnf mode=0600
    when: mysql_root_db_pass != ''
    no_log: True

  - name: remove password validation plugin (5.7.x)
    shell: 'mysql -e "uninstall plugin validate_password;"'
    when: "'5.7.' in mysql_cli_version.stdout"
    failed_when: false
    changed_when: false

  - name: ensure anonymous users are not in the database
    mysql_user: name='' host={{ item }} state=absent
    with_items:
    - localhost
    - "{{ ansible_hostname|lower() }}"

  - name: remove the test database
    mysql_db: name=test state=absent

  - name: create the databases
    mysql_db: name={{ item.name }} state=present
    with_items: "{{mysql_db}}"
    when: mysql_db|lower() != 'none'

  - name: create the database users
    mysql_user: name={{ item.name }} password={{ item.pass|default("foobar") }} priv={{ item.priv|default("*.*:ALL") }} state=present host={{ item.host | default("localhost") }}
    with_items: "{{mysql_users}}"
    when: mysql_users|lower() != 'none'
    no_log: True

  - name: create the replication users
    mysql_user: name={{ item.name }} host="%" password={{ item.pass|default("foobar") }} priv=*.*:"REPLICATION SLAVE" state=present
    with_items: "{{mysql_repl_user}}"
    when: mysql_repl_role == 'master'
    no_log: True

  - name: check if slave is already configured for replication
    mysql_replication: mode=getslave
    ignore_errors: true
    register: slave
    when: mysql_repl_role == 'slave'

  - name: ensure the hostname entry for master is available for the client
    lineinfile: dest=/etc/hosts regexp="{{ mysql_repl_master }}" line="{{ mysql_repl_master + '   ' +  hostvars[mysql_repl_master].ansible_default_ipv4.address }}" state=present
    when: slave is failed and mysql_repl_role == 'slave' and mysql_repl_master is defined

  - name: get the current master servers replication status
    mysql_replication: mode=getmaster
    delegate_to: "{{ mysql_repl_master }}"
    register: repl_stat
    when: slave is failed and mysql_repl_role == 'slave' and mysql_repl_master is defined

  - name: change the master in slave to start the replication
    mysql_replication: mode=changemaster master_host={{ mysql_repl_master }} master_log_file={{ repl_stat.File }} master_log_pos={{ repl_stat.Position }} master_user={{ mysql_repl_user[0].name }} master_password={{ mysql_repl_user[0].pass }}
    when: slave is failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
    no_log: True
